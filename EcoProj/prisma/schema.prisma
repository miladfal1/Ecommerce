generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Status {
  Done
  Failed
  Pending
}

model Address {
  id          String        @id @default(uuid())
  country     String
  city        String
  description String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  FinalOrders FinalOrders[]
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String
  phoneNumber Decimal       @db.Decimal(12, 0)
  FinalOrders FinalOrders[]
  Address     Address[]
  Basket      Basket[]
}

model Seller {
  id           String         @id @default(uuid())
  name         String
  email        String
  phoneNumber  Decimal        @db.Decimal(12, 0)
  ProductPrice ProductPrice[]
}

model Product {
  id               String             @id @default(uuid())
  name             String
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       String
  ProductPrice     ProductPrice[]
  ProductAttribute ProductAttribute[]
}

model Category {
  id       String     @id @default(uuid())
  name     String
  parentId String?
  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
  Product  Product[]
}

model ProductPrice {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  String
  price     Decimal  @db.Decimal(9, 2)
  Basket    Basket[]
  qty       Int
}

model Basket {
  id             String       @id @default(uuid())
  productPrice   ProductPrice @relation(fields: [productPriceId], references: [id], onDelete: Cascade)
  productPriceId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  finalOrders    FinalOrders?  @relation(fields: [finalOrderId], references: [id], onDelete: Cascade)
  finalOrderId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  qty            Int
  status         Status       @default(Pending)
  price          Decimal      @db.Decimal(9, 2)
}

model FinalOrders {
  id          String   @id @default(uuid())
  address     Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId   String
  transforFee Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  finalPrice  Decimal  @db.Decimal(9, 2)
  discount    Decimal  @db.Decimal(2, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Basket      Basket[]
}

model Attribute {
  id               String             @id @default(uuid())
  name             String
  type             String
  unit             String
  ProductAttribute ProductAttribute[]
}

model ProductAttribute {
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId String
  value       String

  @@id([productId, attributeId])
}
